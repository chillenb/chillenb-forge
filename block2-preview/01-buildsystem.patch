diff --git CMakeLists.txt CMakeLists.txt
index 30f35e4..726b354 100644
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -1,4 +1,4 @@
-CMAKE_MINIMUM_REQUIRED(VERSION 3.5)
+CMAKE_MINIMUM_REQUIRED(VERSION 3.15)
 
 FIND_PROGRAM(CMAKE_C_COMPILER NAMES $ENV{CC} gcc PATHS ENV PATH NO_DEFAULT_PATH)
 FIND_PROGRAM(CMAKE_CXX_COMPILER NAMES $ENV{CXX} g++ PATHS ENV PATH NO_DEFAULT_PATH)
@@ -47,62 +47,19 @@ ENDIF()
 
 # Check Python3 and Pybind11
 
-SET(Python_ADDITIONAL_VERSIONS 3)
-FIND_PACKAGE(PythonInterp)
+FIND_PACKAGE(Python 3.7 COMPONENTS Interpreter Development REQUIRED)
+FIND_PACKAGE(pybind11 CONFIG REQUIRED)
 
-IF (NOT PYTHONINTERP_FOUND)
-    MESSAGE(FATAL_ERROR "Python3 not found.")
-ENDIF()
-
-FIND_PACKAGE(PythonLibs ${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR})
-
-EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} -c "import distutils.sysconfig; \
-        print(distutils.sysconfig.get_config_var('LIBDIR'))"
-        OUTPUT_VARIABLE PYTHON_LIB_PATH OUTPUT_STRIP_TRAILING_WHITESPACE)
-EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} -c "import distutils.sysconfig; \
-        print(distutils.sysconfig.get_config_var('INCLUDEDIR'))"
-        OUTPUT_VARIABLE PYTHON_INCLUDE_PATH OUTPUT_STRIP_TRAILING_WHITESPACE)
-
-IF (PYTHONLIBS_FOUND)
-    STRING(FIND ${PYTHONLIBS_VERSION_STRING} "." PYV_L REVERSE)
-    STRING(SUBSTRING ${PYTHONLIBS_VERSION_STRING} 0 ${PYV_L} PYTHONLIBS_VERSION_STRING_SHORT)
-ELSE()
-    SET(PYTHONLIBS_VERSION_STRING_SHORT 0.0)
-ENDIF()
+MESSAGE(STATUS "PROJECT_NAME = ${PROJECT_NAME}")
+MESSAGE(STATUS "Python_VERSION_MAJOR = ${Python_VERSION_MAJOR}")
+MESSAGE(STATUS "Python_VERSION_MINOR = ${Python_VERSION_MINOR}")
+MESSAGE(STATUS "Python_LIBRARIES = ${Python_LIBRARIES}")
+MESSAGE(STATUS "Python_EXECUTABLE = ${Python_EXECUTABLE}")
 
-MESSAGE(STATUS "PYTHONLIBS_VERSION_STRING_SHORT = ${PYTHONLIBS_VERSION_STRING_SHORT}")
+MESSAGE(STATUS "Python_INCLUDE_DIRS = ${Python_INCLUDE_DIRS}")
 
-IF ((NOT PYTHONLIBS_FOUND) OR NOT (${PYTHONLIBS_VERSION_STRING_SHORT} EQUAL ${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}))
-    EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} -c "import distutils.sysconfig; \
-        import os; print(os.path.join(distutils.sysconfig.get_config_var('LIBDIR'), \
-        distutils.sysconfig.get_config_var('LDLIBRARY')))"
-        OUTPUT_VARIABLE PYTHON_LIBRARIES OUTPUT_STRIP_TRAILING_WHITESPACE)
-    EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} -c "from distutils.sysconfig import get_python_inc; \
-        print(get_python_inc())"
-        OUTPUT_VARIABLE PYTHON_INCLUDE_DIRS OUTPUT_STRIP_TRAILING_WHITESPACE)
-ENDIF()
+MESSAGE(STATUS "Pybind11_INCLUDE_DIRS = ${Pybind11_INCLUDE_DIRS}")
 
-EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} -c "import importlib.machinery;print(importlib.machinery.EXTENSION_SUFFIXES[0])"
-    OUTPUT_VARIABLE PYLIB_SUFFIX OUTPUT_STRIP_TRAILING_WHITESPACE)
-EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} -c "import pybind11;print(pybind11.get_include())"
-    OUTPUT_VARIABLE PYBIND_INCLUDE_DIRS OUTPUT_STRIP_TRAILING_WHITESPACE)
-
-MESSAGE(STATUS "PROJECT_NAME = ${PROJECT_NAME}")
-MESSAGE(STATUS "PYTHON_VERSION_MAJOR = ${PYTHON_VERSION_MAJOR}")
-MESSAGE(STATUS "PYTHON_VERSION_MINOR = ${PYTHON_VERSION_MINOR}")
-MESSAGE(STATUS "PYTHON_LIBRARIES = ${PYTHON_LIBRARIES}")
-MESSAGE(STATUS "PYTHON_EXECUTABLE = ${PYTHON_EXECUTABLE}")
-MESSAGE(STATUS "PYTHON_EXECUTABLE_HINT = ${PYTHON_EXECUTABLE_HINT}")
-MESSAGE(STATUS "PYTHON_INCLUDE_DIRS = ${PYTHON_INCLUDE_DIRS}")
-MESSAGE(STATUS "PYLIB_SUFFIX = ${PYLIB_SUFFIX}")
-MESSAGE(STATUS "PYBIND_INCLUDE_DIRS = ${PYBIND_INCLUDE_DIRS}")
-
-IF (${PYTHON_EXECUTABLE_HINT})
-    IF (NOT (${PYTHON_EXECUTABLE_HINT} EQUAL ${PYTHON_EXECUTABLE}))
-        MESSAGE(FATAL_ERROR "Python3 used by cmake (${PYTHON_EXECUTABLE}) does not match Python3 \
-            used by setup.py (${PYTHON_EXECUTABLE_HINT})!")
-    ENDIF()
-ENDIF()
 
 SET(CMAKE_CXX_STANDARD 11)
 SET(CMAKE_CXX_STANDARD_REQUIRED True)
@@ -503,9 +460,9 @@ ENDIF()
 
 IF (${USE_BLIS})
     FIND_PATH(BLIS_INCLUDE_DIR NAMES blis/blis.h HINTS $ENV{MKLROOT}/include /usr/local/include
-        $ENV{BLIS_PREFIX}/include ${PYTHON_INCLUDE_PATH})
+        $ENV{BLIS_PREFIX}/include ${Python_INCLUDE_DIRS})
     FIND_LIBRARY(BLIS_LIBS NAMES libblis.so PATHS $ENV{MKLROOT}/lib /usr/local/lib /usr/lib64
-        $ENV{BLIS_PREFIX}/lib ${PYTHON_INCLUDE_PATH})
+        $ENV{BLIS_PREFIX}/lib ${Python_INCLUDE_DIRS})
     SET(BLIS_FLAG "-D_HAS_BLIS")
 ENDIF()
 
@@ -551,13 +508,13 @@ ENDIF()
 
 IF (${TBB})
     FIND_PATH(TBB_INCLUDE_DIR NAMES tbb/tbb.h
-        HINTS $ENV{MKLROOT}/include /usr/local/include $ENV{TBBROOT}/include ${PYTHON_INCLUDE_PATH})
+        HINTS $ENV{MKLROOT}/include /usr/local/include $ENV{TBBROOT}/include ${Python_INCLUDE_DIRS})
     FIND_LIBRARY(TBB_LIB NAMES tbb
-        PATHS $ENV{MKLROOT}/lib $ENV{MKLROOT}/lib/intel64 /usr/local/lib $ENV{TBBROOT}/lib ${PYTHON_LIB_PATH})
+        PATHS $ENV{MKLROOT}/lib $ENV{MKLROOT}/lib/intel64 /usr/local/lib $ENV{TBBROOT}/lib ${Python_LIBRARY_DIRS})
     FIND_LIBRARY(TBB_LIB_MAL NAMES tbbmalloc
-        PATHS $ENV{MKLROOT}/lib $ENV{MKLROOT}/lib/intel64 /usr/local/lib $ENV{TBBROOT}/lib ${PYTHON_LIB_PATH})
+        PATHS $ENV{MKLROOT}/lib $ENV{MKLROOT}/lib/intel64 /usr/local/lib $ENV{TBBROOT}/lib ${Python_LIBRARY_DIRS})
     FIND_LIBRARY(TBB_LIBS_MALP NAMES tbbmalloc_proxy
-        PATHS $ENV{MKLROOT}/lib $ENV{MKLROOT}/lib/intel64 /usr/local/lib $ENV{TBBROOT}/lib ${PYTHON_LIB_PATH})
+        PATHS $ENV{MKLROOT}/lib $ENV{MKLROOT}/lib/intel64 /usr/local/lib $ENV{TBBROOT}/lib ${Python_LIBRARY_DIRS})
     SET(TBB_LIBS ${TBB_LIB} ${TBB_LIB_MAL} ${TBB_LIBS_MALP})
     SET(TBB_FLAG "-D_HAS_TBB")
 ENDIF()
@@ -565,7 +522,7 @@ ENDIF()
 IF (${USE_MKL_ANY})
     SET(CMAKE_FIND_LIBRARY_SUFFIXES_BKP ${CMAKE_FIND_LIBRARY_SUFFIXES})
     SET(CMAKE_FIND_LIBRARY_SUFFIXES "${CMAKE_FIND_LIBRARY_SUFFIXES_BKP};.so.1;.1.dylib;.so.2;.2.dylib;.so.3;.3.dylib;.so.4;.4.dylib")
-    FIND_PATH(MKL_INCLUDE_DIR NAMES mkl.h HINTS $ENV{MKLROOT}/include /usr/local/include ${PYTHON_INCLUDE_PATH})
+    FIND_PATH(MKL_INCLUDE_DIR NAMES mkl.h HINTS $ENV{MKLROOT}/include /usr/local/include ${Python_INCLUDE_DIRS})
     IF (WIN32)
         SET(MKL_LIB_NAME_PRE_SUF "_dll")
     ELSE()
@@ -573,22 +530,22 @@ IF (${USE_MKL_ANY})
     ENDIF()
     IF (${USE_MKL})
         FIND_LIBRARY(MKL_LIB_LP NAMES mkl_intel_lp64${MKL_LIB_NAME_PRE_SUF}
-            PATHS $ENV{MKLROOT}/lib $ENV{MKLROOT}/lib/intel64 /usr/local/lib ${PYTHON_LIB_PATH} NO_DEFAULT_PATH)
+            PATHS $ENV{MKLROOT}/lib $ENV{MKLROOT}/lib/intel64 /usr/local/lib ${Python_LIBRARY_DIRS} NO_DEFAULT_PATH)
         SET(MKL_FLAG "-D_HAS_INTEL_MKL=${MKL_OMP_VALUE}")
     ELSE()
         FIND_LIBRARY(MKL_LIB_LP NAMES mkl_intel_ilp64${MKL_LIB_NAME_PRE_SUF}
-            PATHS $ENV{MKLROOT}/lib $ENV{MKLROOT}/lib/intel64 /usr/local/lib ${PYTHON_LIB_PATH} NO_DEFAULT_PATH)
+            PATHS $ENV{MKLROOT}/lib $ENV{MKLROOT}/lib/intel64 /usr/local/lib ${Python_LIBRARY_DIRS} NO_DEFAULT_PATH)
         SET(MKL_FLAG "-D_HAS_INTEL_MKL=${MKL_OMP_VALUE}" "-DMKL_ILP64")
     ENDIF()
     FIND_LIBRARY(MKL_LIB_CORE NAMES mkl_core${MKL_LIB_NAME_PRE_SUF}
-        PATHS $ENV{MKLROOT}/lib $ENV{MKLROOT}/lib/intel64 /usr/local/lib ${PYTHON_LIB_PATH} NO_DEFAULT_PATH)
+        PATHS $ENV{MKLROOT}/lib $ENV{MKLROOT}/lib/intel64 /usr/local/lib ${Python_LIBRARY_DIRS} NO_DEFAULT_PATH)
     FIND_LIBRARY(MKL_LIB_GT NAMES ${MKL_OMP_LIB_NAME}${MKL_LIB_NAME_PRE_SUF}
-        PATHS $ENV{MKLROOT}/lib $ENV{MKLROOT}/lib/intel64 /usr/local/lib ${PYTHON_LIB_PATH} NO_DEFAULT_PATH)
+        PATHS $ENV{MKLROOT}/lib $ENV{MKLROOT}/lib/intel64 /usr/local/lib ${Python_LIBRARY_DIRS} NO_DEFAULT_PATH)
     # AVX and AVX512 are required to avoid setting LD_PRELOAD for python
     FIND_LIBRARY(MKL_LIB_AVX NAMES mkl_avx2
-        PATHS $ENV{MKLROOT}/lib $ENV{MKLROOT}/lib/intel64 /usr/local/lib ${PYTHON_LIB_PATH} NO_DEFAULT_PATH)
+        PATHS $ENV{MKLROOT}/lib $ENV{MKLROOT}/lib/intel64 /usr/local/lib ${Python_LIBRARY_DIRS} NO_DEFAULT_PATH)
     FIND_LIBRARY(MKL_LIB_AVX512 NAMES mkl_avx512
-        PATHS $ENV{MKLROOT}/lib $ENV{MKLROOT}/lib/intel64 /usr/local/lib ${PYTHON_LIB_PATH} NO_DEFAULT_PATH)
+        PATHS $ENV{MKLROOT}/lib $ENV{MKLROOT}/lib/intel64 /usr/local/lib ${Python_LIBRARY_DIRS} NO_DEFAULT_PATH)
     IF (NOT MKL_LIB_AVX)
         SET(MKL_LIB_AVX "")
     ENDIF()
@@ -697,8 +654,10 @@ ENDIF()
 
 IF (${BUILD_LIB})
     ADD_LIBRARY(b2_py_obj OBJECT src/pybind.cpp ${PYBIND_SRCS})
+    TARGET_INCLUDE_DIRECTORIES(b2_py_obj PUBLIC ${pybind11_INCLUDE_DIRS})
     ADD_LIBRARY(b2_py MODULE $<TARGET_OBJECTS:b2_py_obj> ${CORE_SRCS})
-    SET_TARGET_PROPERTIES(b2_py PROPERTIES SUFFIX "${PYLIB_SUFFIX}" PREFIX "")
+    TARGET_LINK_LIBRARIES(b2_py PRIVATE pybind11::module pybind11::thin_lto)
+    pybind11_extension(b2_py)
     LIST(APPEND TARGETS b2_py b2_py_obj)
     IF (APPLE)
         TARGET_LINK_LIBRARIES(b2_py PUBLIC -Wl,-undefined,dynamic_lookup)
@@ -707,11 +666,6 @@ IF (${BUILD_LIB})
         SET(VIS_OPT_FLAG -fvisibility=hidden)
         TARGET_COMPILE_OPTIONS(b2_py_obj BEFORE PRIVATE ${VIS_OPT_FLAG})
         TARGET_COMPILE_OPTIONS(b2_py BEFORE PRIVATE ${VIS_OPT_FLAG})
-    ELSE()
-        GET_FILENAME_COMPONENT(PYTHON_LIB_DIR ${PYTHON_LIBRARIES} DIRECTORY)
-        FIND_LIBRARY(PYTHON_LIB_X NAMES python${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR} HINTS "${PYTHON_LIB_DIR}")
-        MESSAGE(STATUS "PYTHON_LIB_X = ${PYTHON_LIB_X}")
-        TARGET_LINK_LIBRARIES(b2_py PUBLIC ${PYTHON_LIB_X})
     ENDIF()
 ENDIF()
 
@@ -784,8 +738,7 @@ FOREACH (target ${TARGETS})
     TARGET_LINK_LIBRARIES(${target} PRIVATE ${PTHREAD} ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES} ${MKL_LIBS} ${MPI_LIBS} ${TBB_LIBS} ${BLIS_LIBS})
     SET_TARGET_PROPERTIES(${target} PROPERTIES LINK_FLAGS "${ARCH_LINK_FLAGS} ${WASM_LINK_FLAGS} ${MPI_LINK_FLAGS}")
 
-    TARGET_INCLUDE_DIRECTORIES(${target} PUBLIC ${PYTHON_INCLUDE_DIRS} ${PYBIND_INCLUDE_DIRS}
-        ${MKL_INCLUDE_DIR} ${MPI_INCLUDE_DIR} ${TBB_INCLUDE_DIR} ${BLIS_INCLUDE_DIR})
+    TARGET_INCLUDE_DIRECTORIES(${target} PUBLIC ${MKL_INCLUDE_DIR} ${MPI_INCLUDE_DIR} ${TBB_INCLUDE_DIR} ${BLIS_INCLUDE_DIR})
     TARGET_COMPILE_OPTIONS(${target} BEFORE PRIVATE ${VIS_OPT_FLAG} ${OPT_FLAG} ${ARCH_FLAG})
     TARGET_COMPILE_OPTIONS(${target} BEFORE PUBLIC ${MKL_FLAG} ${MPI_FLAG}
         ${TMPL_FLAG} ${BOND_FLAG} ${SCI_FLAG} ${CORE_FLAG} ${DMRG_FLAG} ${BIG_SITE_FLAG}
@@ -837,3 +790,17 @@ IF (${BUILD_TEST})
 
     ADD_TEST(NAME Test COMMAND ${PROJECT_NAME}_tests)
 ENDIF()
+
+IF (${SKBUILD})
+    IF (${BUILD_EXE})
+        INSTALL (TARGETS b2_exe RUNTIME DESTINATION ${SKBUILD_SCRIPTS_DIR})
+    ENDIF()
+    IF (${BUILD_LIB})
+        INSTALL(TARGETS b2_py LIBRARY DESTINATION .)
+    ENDIF()
+
+    INSTALL(PROGRAMS "pyblock2/driver/block2main" DESTINATION ${SKBUILD_SCRIPTS_DIR})
+    INSTALL(PROGRAMS "pyblock2/driver/gaopt" DESTINATION ${SKBUILD_SCRIPTS_DIR})
+    INSTALL(PROGRAMS "pyblock2/driver/readwfn.py" DESTINATION ${SKBUILD_SCRIPTS_DIR})
+    INSTALL(PROGRAMS "pyblock2/driver/writewfn.py" DESTINATION ${SKBUILD_SCRIPTS_DIR})
+ENDIF()
diff --git pyproject.toml pyproject.toml
new file mode 100644
index 0000000..c5b3a5b
--- /dev/null
+++ pyproject.toml
@@ -0,0 +1,34 @@
+[build-system]
+requires = ["scikit-build-core", "pybind11"]
+build-backend = "scikit_build_core.build"
+
+[project]
+name = "block2"
+description = "An efficient MPO implementation of DMRG for quantum chemistry."
+version = "0.1.10"
+license = "	GPL-3.0-only"
+license-files = ["LICENSE"]
+readme = "README.md"
+authors = [
+  { name = "Huanchen Zhai", email = "hczhai.ok@gmail.com" },
+  { name = "Henrik R. Larsson" },
+  { name = "Seunghoon Lee" },
+  { name = "Zhi-Hao Cui" },
+]
+
+[project.urls]
+Homepage = "https://github.com/block-hczhai/block2-preview"
+
+[tool.scikit-build]
+wheel.packages = ["pyblock2"]
+
+[tool.scikit-build.cmake.define]
+USE_MKL = "ON"
+BUILD_LIB = "ON"
+BUILD_EXE = "ON"
+LARGE_BOND = "ON"
+USE_KSYMM = "OFF"
+USE_COMPLEX = "ON"
+USE_SINGLE_PREC = "ON"
+USE_SG = "ON"
+USE_SANY = "ON"
\ No newline at end of file
diff --git setup.py setup.py.old
similarity index 100%
rename from setup.py
rename to setup.py.old
